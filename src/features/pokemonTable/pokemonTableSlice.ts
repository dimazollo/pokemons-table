import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit"
import { RootState, AppThunk } from "../../store/store"
import { Pokemon } from "../../types"
import { getPokemonByName, getPokemons } from "../../services/pokemon"

export interface PokemonTableState {
  count: number
  status: "idle" | "loading" | "failed"
  pokemons: Array<Pokemon>
}

const initialState: PokemonTableState = {
  count: 0,
  status: "idle",
  pokemons: [],
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  "counter/fetchCount",
  async (amount: number) => {
    // const response = await fetchCount(amount)
    // The value we return becomes the `fulfilled` action payload
    // return response.data
  },
)

export const pokemonTableSlice = createSlice({
  name: "counter",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setPokemons: (state, action: PayloadAction<Array<Pokemon>>) => {
      state.pokemons = action.payload
    },
    setCount: (state, action: PayloadAction<number>) => {
      state.count = action.payload
    },
    setStatus: (state, action: PayloadAction<PokemonTableState["status"]>) => {
      state.status = action.payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = "loading"
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = "idle"
        // state.value += action.payload
      })
      .addCase(incrementAsync.rejected, (state) => {
        state.status = "failed"
      })
  },
})

export const { setCount, setPokemons, setStatus } = pokemonTableSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.pokemonTable.count
export const selectPokemons = (state: RootState) => state.pokemonTable.pokemons
export const selectStatus = (state: RootState) => state.pokemonTable.status

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const fetchPokemons =
  (limit: number, offset: number): AppThunk =>
  async (dispatch, getState) => {
    dispatch(setStatus("loading"))

    const pokemons: Pokemon[] = []

    try {
      const response = await getPokemons(limit, offset)
      dispatch(setCount(response.count))

      for (let { name: pokemonName } of response.results) {
        const pokemonData = await getPokemonByName(pokemonName)
        pokemons.push(pokemonData)
      }

      dispatch(setPokemons(pokemons))
      dispatch(setStatus("idle"))
    } catch (e) {
      dispatch(setStatus("failed"))
    }
  }

export default pokemonTableSlice.reducer
